<tool id="plink2" name="plink2" version="2.3.0a" python_template_version="3.5">
    <requirements>
        <requirement type="package" version="2.00a2.3"></requirement>
    </requirements>
    <command detect_errors="exit_code"><![CDATA[

    ## Create Plink folder for any inputs

    #if $inputs.input.filetype == "pfile":
        mkdir ./plink_input
        && ln -s $inputs.inputs.pfile.pbed '$__tool_directory__/'plink_input/plink_input.pbed
        && ln -s $inputs.inputs.pfile.bim '$__tool_directory__/'plink_input/plink_input.bim
        && ln -s $inputs.inputs.pfile.fam '$__tool_directory__/'plink_input/plink_input.fam
    #elif #if $inputs.input.filetype == "vcf":
        plink2 --vcf $inputs.inputs.input --out plink_input
    #end if

    ## Plink commands by section
    && plink2 -pfile plink_input
    #if ${functions.func} == "filtering":

        ##ID list functions
            #if $functions.id_list.func == "keep":
                --keep $functions.id_file
            #elif $functions.id_list.func == "keep-fam":
                --keep-fam $functions.id_list.file
            #elif $functions.id_list == "remove":
                --remove $functions.id_list.file
            #elif $functions.id_list == "remove-fam":
                --remove-fam $functions.id_list.file
            #end if

        ##Extraction 
            #if $functions.extraction.ex_func == "extract":
                --extract $functions.extraction.base $functions.file
            #elif $functions.extraction.ex_func == "exclude":
                --exclude $functions.extraction.base $functions.file
            #elif $functions.extraction.ex_func == "extract-intersect":
                --extract-intersect $functions.extraction.base $functions.file
            #end if

        ##Quality filter
            #if $functions.var_min_qual:
                --var-min-qual $fuctions.var_min_qual
            #end if
            #if $functions.var_filter:
                --var-filter $fuctions.var_filter
            #end if

        ##Border bp
            #if $functions.border:
                --bed-border-bp $functions.border
            #end if

        ##Chromosome-specificity
            #if $fuctions.chromosome:
                --chr $functions.chromosome
            #end if

            #if $functions.excluded_chromosomes:
                --not-chr $functions.excluded_chromosomes
            #end if

            #if $functions.extra_chromosomes:
                --allow-extra-chr $functions.extra_chromosomes
            #end if

            #if $functions.autosome != "none"
                $functions.autosome
            #end if

        ##SNP specificity
            #if $functions.snps_exclusives != "No:
                $functions.snps_exclusives
            #end if

        ##Variant windows
            #if #$unctions.ranges.single_multi == "single":
                #if $functions.ranges.window.type == "variant":
                    #if $functions.ranges.window.from:
                        --from $functions.ranges.window.from
                    #end if
                    #if $functions.ranges.window.to:
                        --from $functions.ranges.window.to
                    #end if
                #else if $functions.ranges.window.type == "window":
                    #if $functions.ranges.window.snp:
                        --snp $functions.ranges.window.snp
                    #end if
                    #if $functions.ranges.window.exclude_snp:
                        --exclude-snp $functions.ranges.window.exclude_snp
                    #end if
                    #if $functions.ranges.window.window:
                        --snp $functions.ranges.window.window
                    #end if
                #else:
                    #if $functions.ranges.window.from_bp:
                        --from-bp $functions.ranges.window.from_bp
                    #end if
                    #if $functions.ranges.window.to_bp:
                        --from-bp $functions.ranges.window.to_bp
                    #end if
                #end if
            #else if $functions.ranges.single_multi == "multi":
                $functions.ranges.force_intersect
                #if $functions.ranges.snps:
                    --snps $functions.ranges.snps
                #end if
                #if $functions.ranges.exclude_snps:
                    --exclude-snps $functions.ranges.exclude_snps
                #end if
            #end if
        
        ##Duplicate corrections
            #if $functions.duplicates.duplicate_correct == "Yes":
                $functions.duplicates.type
            #end if
        
        ##Thinning
            #if $functions.thinning.thinning == "Yes":
                #if $functions.thinning.thin:
                    --thin $functions.thinning.thin
                #end if
                #if $functions.thinning.thin_count:
                    --thin-count $functions.thinning.thin_count
                #end if
                #if $functions.thinning.bp_space:
                    --bp-space $functions.thinning.bp_space
                #end if
                #if $functions.thinning.thin_indiv:
                    --thin-indiv $functions.thinning.thin_indiv
                #end if
                #if $functions.thinning.thin_indiv_count:
                    --thin-indiv-count $functions.thinning.thin_indiv_count
                #end if
            #end if

        ##Pheno/covariate
            ###########
                TBD
            ###########
        ##String match
            #if $functions.string_match.smatch == "file":
                --keep-col-match $functions.string_match.data $functions.string_match.text
            #else if $functions.string_match.smatch == "string":
                --keep-col-match-nnum $functions.string_match.colnum
            #end if

        ##Missing genotype rates
            #if $functions.geno_rates.geno:
                --geno $functions.geno_rates.geno
            #end if
            #if $functions.geno_rates.mind:
                --mind $functions.geno_rates.mind
            #end if

        ##Allele Frequencies
            #if $functions.allele_freq.maf:
                --maf $functions.allele_freq.maf
            #end if
            #if $functions.allele_freq.max_maf:
                --max-maf $functions.allele_freq.max_maf
            #end if
            #if $functions.allele_freq.mac:
                --mac $functions.allele_freq.mac
            #end if
            #if $functions.allele_freq.max_mac:
                --max-mac $functions.allele_freq.max_mac
            #end if
        
        ## Hardy-Weinberg
            #if $functions.hwe:
                --hwe $functions.hwe

        ##Sex and Founder filter
            #if $functions.sex_founder_filter.filter == "Yes"
                $functionns.sex_founder_filter.sex_select
            #end if

    #elif $functions.func == "data_manage":
        #if $functions.var_update.var_select == "set-missing-var-ids":
            --set-missing-var-ids $functions.var_update.template
            #if $functions.var_update.multiallele:
                --var-id-multi $functions.var_update.multiallele
            #end if
            #if $functions.var_update.multiallele_nonsnp:
                --var-id-multi-nonsnp $functions.var_update.multiallele_nonsnp
            #end if
        #else:
            --set-missing-var-ids $functions.var_update.template
            #if $functions.var_update.multiallele:
                --var-id-multi $functions.var_update.multiallele
            #end if
            #if $functions.var_update.multiallele_nonsnp:
                --var-id-multi-nonsnp $functions.var_update.multiallele_nonsnp
            #end if
        #end if
        #if $functions.new_id.set =="Yes":
            ----new-id-max-allele-len $functions.new_id.length $functions.new_id.rule
        #end if
        #if $functions.update_cols.set == "update_map":
            --update-map $functions.update_cols.input $functions.update_cols.col_num $functions.update_cols.old_col $functions.update_cols.skip
        #elif $functions.update_cols.set == "update_name":
            --update-name $functions.update_cols.col_num $functions.update_cols.var_col $functions.update_cols.skip
        #end if
        #if $functions.ref_allele.set == "yes":
            --ref-allele $functions.ref_allele.force $functions.ref_allele.file $functions.ref_allele.column $functions.ref_allele.var_id
        #end if
        #if $functions.alt1_allele.set == "yes":
            --alt1-allele $functions.alt1_allele.force $functions.alt1_allele.file $functions.alt1_allele.column $functions.alt1_allele.var_id
        #end if
    #elif $functions.func == "stats":
        $functions.stats.freq
        $functions.stats.hardy
        $functions.stats.missing
        $functions.stats.het
    #elif $functions.func == "link":
        #if $function.set_indep.choice == "Yes":
            --indep-pairwise $function.set_indep.window $function.set_indep.step $function.set_indep.r2
        #end if
    #elif $functions.func == "pair_compare":

    #elif $functions.func == "dist_sim":

    #elif $functions.func == "stratification":

    #elif $functions.func == "association":
        #if $functions.glm.set_glm == "Yes":
            --glm $functions.glm.hide_covar $functions.glm.sex $functions.glm.log10
        #end if
        #if $functions.adjust.adjust == "Yes":
            --adjust 
            #for $type in $functions.adjust.adj_vals:
                $type 
            #end for
        #end if
    #elif $functions.func == "scoring":

    #else:

    #end if

    --make-pgen --out plink-output
    ]]></command>
    <inputs>
        <section name="inputs" title="Data inputs" expanded="true">
            <conditional name="inputs">
                <param name="filetype" type="select" label="Main input data type">
                    <option value="pfile">plink file</option>
                    <option value="vcf">vcf/bcf</option>
                </param>
                <when value="pfile">
                    <param format="binary" name="pbed" type="data" label="plink bed file"/>
                    <param format="tabular,tsv" name="bim" type="data" label=".bim file"/>
                    <param format="tabular,tsv" name="fam" type="data" label=".fam file"/>
                </when>
                <when value="vcf">
                    <param name="input" format="vcf" type="data" label="VCF Input file"/>
                </when>
            </conditional>
            <conditional name="covar">
                <param name="covarfile" type="select" label="Input a covariates file?">
                    <option value="No"/>
                    <option value="Yes"/>
                </param>
                <when value="No"/>
                <when value="Yes">
                    <param name="covar_input" type="data" format="txt,tabular,tsv" label="Input covariate file"/>
                </when>
            </conditional>
        </section>
        <conditional name="functions">
            <param name="func" type="select" label="Plink functions">
                <option value="filtering">Filtering</option>
                <option value="data_manage">Data Management</option>
                <option value="stats">Basic statistics</option>
                <option value="link">Linkage disequalibrium</option>
                <option value="pair_compare">Pariwise sample comarison</option>
                <option value="dist_sim">Sample-distance and similarity</option>
                <option value="stratification">Population stratification</option>
                <option value="association">Association analysis</option>
                <option value="scoring">Linear scoring</option>
                <option value="rerun">Rerun</option>
            </param>
            <when value="filtering">
                <conditional name="id_lists">
                    <param name="func" type="select" label="ID list functions">
                        <option value="none"/>
                        <option value="keep"/>
                        <option value="keep-fam"/>
                        <option value="remove"/>
                        <option value="remove-fam"/>
                    </param>
                    <when value="none"/>
                    <when value="keep">
                        <param format="tabular, tsv, txt" name="file" type="data" label="Keep file." help="Accepts one or more space/tab-delimited text files with sample IDs, and removes all unlisted samples from the current analysis;"/>
                    </when>
                    <when value="keep-fam">
                        <param format="tabular, tsv, txt" name="file" type="data" label="Keep-fam file" help="Accepts text files with family IDs in the first column, and keeps entire families."/>
                    </when>
                    <when value="remove">
                        <param format="tabular, tsv, txt" name="file" type="data" label="Remove file" help="Accepts one or more space/tab-delimited text files with sample IDs, and removes all listed samples from the current analysis"/>
                    </when>
                    <when value="remove-fam">
                        <param format="tabular, tsv, txt" name="file" type="data" label="Remove-fam file" help="Acceptz text files with family IDs in the first column, and removes entire families."/>
                    </when>
                </conditional>
                <conditional name="extraction">
                    <param name="ex_func" type="select" label="ID extraction functions">
                        <option value="none"/>
                        <option value="extract"/>
                        <option value="exclude"/>
                        <option value="extract-intersect"/>
                    </param>
                    <when value="none"/>
                    <when value="extract">
                        <param format="tabular, tsv, txt" name="file" type="data" label="Extract" help="Accepts one or more text file(s) with variant IDs , and removes all unlisted variants from the current analysis"/>
                        <param type="boolean" name="base" truevalue="bed1" falsevalue="bed0" help= "Is the file zero based?"/>
                    </when>
                    <when value="exclude">
                        <param format="tabular, tsv, txt" name="file" type="data" label="Exclude" help="Accepts one or more text file(s) with variant IDs , and removes all listed variants from the current analysis"/>
                        <param type="boolean" name="base" truevalue="bed1" falsevalue="bed0" help= "Is the file zero based?"/>
                    </when>
                    <when value="extract-intersect">
                        <param format="tabular, tsv, txt" name="file" type="data" label="Exclude" help="Just like --extract, except that a variant must be in the intersection, rather than just the union, of the --extract-intersect files to be kept."/>
                        <param type="boolean" name="base" truevalue="bed1" falsevalue="bed0" help= "Is the file zero based?"/>
                    </when>
                </conditional>
                <param name="border" type="integer" label="Bed border bp" help="Extends all the intervals in an input BED file (for e.g. --extract bed0) by the given number of base-pairs on both sides." optional="true"/>
                <!-- <conditional name="col-cond">
                    <param name="func" type="select" label="ID list functions">
                        <option value="none"/>
                        <option value="extract-col-cond"/>
                        <option value="extract-col-cond-match"/>
                        <option value="extract-col-cond-mismatch"/>
                        <option value="extract-col-cond-substr"/>
                        <option value="extract-col-cond-min"/>
                        <option value="extract-col-cond-max"/>
                    </param>
                    <when value="none"/>
                    <when value="extract-col-cond">
                    </when>
                    <when value="extract-col-cond-match">
                    </when>
                    <when value="extract-col-cond-mismatch">
                    </when>
                    <when value="extract-col-cond-substr">
                    </when>
                    <when value="extract-col-cond-min">
                    </when>
                    <when value="extract-col-cond-max">
                    </when>
                </conditional> -->
                <param name="var_min_qual" type="integer" label="Minimum quality score" help="Causes all variants with QUAL value smaller than the given number, or with no QUAL value at all, to be skipped." optional="true"/>
                <param name="var_filter" type="text" label="Multiple filters" optional="true" help="Space separated list of filters. Skips varians which fail these filters."/>
                <!-- <section name="info">

                </section> -->
                <param name="chromosome" type="text" label="Chromosome(s)" help="Excludes all variants not on the listed chromosome(s). Can be listed as single chromsome, a hyphenated range, or comma separated list." optional="true"/>
                <param name="excluded_chromosome" type="text" label="Exclude Chromosome(s)" help="Excludes all variants on the listed chromosome(s). Can be listed as single chromsome, a hyphenated range, or comma separated list." optional="true"/>
                <param name="extra_chromosomes" type="text" label="Extra chromosomes" help="Allows specified extra chromosomes/scaffolds not normally listed. ex. chr1_gl000191_random." optional="true"/>
                <param name="autosome" type="select" label="Autosome/unplaced exclusion">
                    <option value="none">None</option>
                    <option value="--autosome">Exclude all unplaced and non-autosomal variants</option>
                    <option value="--autosome-par">Excludes all unplaced and non-autosomal variants, but keep XY/PAR1/PAR2. Can becombined with exclude-chromosmes.</option>
                </param>
                <param name="snps_exclusives" type="select" label="SNP exclusive">
                    <option value="No">No</option>
                    <option value="--snps-only">Only return SNPs</option>
                    <option value="--snps-only ['just-actg']">Exclude SNPs other than {'A', 'C', 'G', 'T', 'a', 'c', 'g', 't', missing code}</option>
                </param>
                <conditional name="ranges">
                    <param name="single_multi" type="select" label="Single or multiple variant-based range window?">
                        <option value="">No range specified</option>
                        <option value="single">Single variants</option>
                        <option value="multi">Multiple variants</option>
                    </param>
                    <when value=""/>
                    <when value="single">
                        <conditional name="window">
                            <param name="type" type="select" label="Specify range for variants">
                                <option value="variant">Around/between specific variant(s)"</option>
                                <option value="window">Around a specific variant</option>
                                <option value="range">Within a specific area (Must also specify a single chromosome in above input)</option>
                            </param>
                            <when value="variant">
                                <param name="from" type="text" label="From" help="Excludes all variants on different chromosomes than the named variant, as well as those with smaller base-pair position values. If they are used together but the --from variant is after the --to variant, they are automatically swapped." optional="true"/>
                                <param name="to" type="text" label="To" help="Excludes all variants on different chromosomes than the named variant, as well as those with larger base-pair position values. If they are used together but the --from variant is after the --to variant, they are automatically swapped." optional="true"/>
                            </when>
                            <when value="window">
                                <param name="snp" type="text" label="SNP variant id to include" optional="true"/>
                                <param name="exclude_snp" type="text" label="SNP variant id to exclude" optional="true"/>
                                <param name="window" type="integer" label="Window" help="All variants with physical position no more than half the specified kb distance (decimal permitted) from the named variant are loaded as well" optional="true"/>
                            </when>
                            <when value="range">
                                <param name="from_bp" type="integer" label="These flags let you use physical positions to specify a variant range to load. Must also have specified a chromosome in above settings." optional="true"/>
                                <param name="tp_bp" type="integer" label="These flags let you use physical positions to specify a variant range to load. Must also have specified a chromosome in above settings." optional="true"/>
                            </when>
                        </conditional>
                    </when>
                    <when value="multi">
                        <param name="force_intersect" value="--force-intersect" label="Force intersect" type="boolean" help="To reduce the potential for confusion, PLINK 2 normally errors out when multiple variant-inclusion filters 
                        (--extract[-intersect], --extract-col-cond, --from/--to, --from-bp/--to-bp, --snp, --snps) are specified, since it may not be obvious whether the intersection or union will be taken. 
                        --force-intersect allows the run to proceed; the set intersection will be taken."/>
                        <param name="snps" type="text" label="List of SNP variant ids to include" optional="true"/>
                        <param name="exclude_snps" type="text" label="List of SNP variant ids to exclude" optional="true"/>
                    </when>
                </conditional>
                <conditional name="duplicates">
                    <param name="duplicate_correct" type="select" label="Duplicate correct?">
                        <option value="No"/>
                        <option value="Yes"/>
                    </param>
                    <when value="No"/>
                    <when value="Yes">
                        <param name="type" type="select" label="Correction type">
                            <option value="--rm-dup error" selected="true">Error</option>
                            <option value="--rm-dup retain-mismatch">retain-mismatch</option>
                            <option value="--rm-dup exclude-mismatch">exclude mismatch</option>
                            <option value="--rm-dup exclude-all">exclude all</option>
                            <option value="--rm-dup force-first">Error</option>
                        </param>
                    </when>
                </conditional>
                <conditional name="thinning">
                    <param name="thinning" type="select" label="Arbitrary thinning">
                        <option value="No"/>
                        <option value="Yes"/>
                    </param>
                    <when value="No"/>
                    <when value="Yes">
                        <param name="thin" type="integer" label="Thin" help="Removes variants at random by retaining each variant with probability p" optional="true"/>
                        <param name="thin_count" type="integer" label="Thin Count" help="Removes variants at random until only n remain" optional="true"/>
                        <param name="bp_space" type="integer" label="BP space" help="Excludes one variant from each pair closer than the given bp count" optional="true"/>
                        <param name="thin_indiv" type="integer" label="Thin Individual" help="Removes samples at random by retaining each sample with probability p" optional="true"/>
                        <param name="thin_indiv_count" type="integer" label="Thin Individual count" help="Removes samples at random until only n remain." optional="true"/>
                    </when>
                </conditional>
                <conditional name="pheno_cov_based">
                    <param name="pheno_cov" type="select" label="Phenotype/Covariate-based">
                        <option value="No" selected="true"/>
                        <option value="phenotype"/>
                        <option value="Covariate"/>
                    </param>
                    <when value="No"/>
                    <when value="phenotype">
                        <!-- keep-if <phenotype/covariate name> <operator> <value>
                        remove-if <phenotype/covariate name> <operator> <value>
                        require-pheno [phenotype name(s)...]
                        keep-cats <filename>
                        keep-cat-names <name(s)...>
                        remove-cats <filename>
                        remove-cat-names <name(s)...>
                        keep-cat-pheno <phenotype/covariate name>
                        remove-cat-pheno <phenotype/covariate name> -->
                    </when> 
                    <when value="Covariate">
                        <!-- keep-if <phenotype/covariate name> <operator> <value>
                        remove-if <phenotype/covariate name> <operator> <value>
                        require-covar [covariate name(s)...]
                        keep-cats <filename>
                        keep-cat-names <name(s)...>
                        remove-cats <filename>
                        remove-cat-names <name(s)...> -->
                    </when>
                </conditional>
                <conditional name="string_match">
                    <param name="smatch" type="select" label="String Match">
                        <option value="No"/>
                        <option value="file">From separate file</option>
                        <option value="string">From string/column</option>
                    </param>
                    <when value="No"/>
                    <when value="file">
                        <param type="data" name="file" format="tsv, tabular" label="File to match"/>
                        <param type="text" name="match" label="String(s) to match"/>
                    </when>
                    <when value="string">
                        <!-- <param type="text" name="colname" label="Column name to match"/> -->
                        <param type="integer" name="colnum" label="Column number to match" optional="true"/>
                    </when>
                </conditional>
                <section name="geno_rates" title="Missing Genotype Rates" expanded="true">
                    <param name="geno" type="float" label="Set Geno" help="filters out all variants with missing call rates exceeding the provided value (default 0.1) to be removed" optional="true"/>
                    <param name="mind" type="float" label="Set Mind" help="filters out all samples with missing call rates exceeding the provided value (default 0.1) to be removed" optional="true"/>
                </section>
                <section name="allele_freq" title="Allele Frequencies" expanded="true">
                    <param name="maf" type="float" label="maf" help="Filters out all variants with allele frequency below the provided threshold (default 0.01)" optional="true"/>
                    <param name="max_maf" type="float" label="max-maf" help="Filters out all variants with allele frequency above the provided threshold (default 0.01)" optional="true"/>
                    <param name="mac" type="float" label="mac" help="Filters out all variants with allele counts below the provided threshold (default 0.01)" optional="true"/>
                    <param name="max_mac" type="float" label="max-mac" help="filters out all variants with allele counts above the provided threshold (default 0.01)" optional="true"/>
                </section>
                <param name="hwe" type="float" label="Hardy-Weinberg Equilibrium" help="Filters out all variants which have Hardy-Weinberg equilibrium exact test 
                p-value below the provided threshold. It is recommended setting a low threshold—serious genotyping errors often yield extreme p-values like 1e-501 which 
                are detected by any reasonable configuration of this test, while genuine SNP-trait associations can be expected to deviate slightly from Hardy-Weinberg 
                equilibrium (so it's dangerous to choose a threshold that filters out too many variants)." optional="true"/>
                <conditional name="sex_founder_filter">
                    <param name="filter" type="select" label="Filter on sex and/or founders">
                        <option value="No"/>
                        <option value="Yes"/>
                    </param>
                    <when value="No"/>
                    <when value="Yes">
                        <param name="sex_select" type="select" label="Sex select" help="Filter by sex. --keep-females excludes all male and unknown-sex samples, --keep-males excludes females and unknown-sex samples, and --keep-nosex excludes all known-sex samples. Conversely, --remove-females only excludes known females, --remove-males only excludes known males, and --remove-nosex only excludes unknown-sex samples.">
                            <option value="--keep-females">Keep females</option>
                            <option value="--keep-males">Keep males</option>
                            <option value="--keep-nosex">Keep nosex</option>
                            <option value="--remove-females">Remove females</option>
                            <option value="--remove-males">Remove males</option>
                            <option value="--remove-nosex">Remove nosex</option>
                        </param>
                        <param name="founder_select" type="select" label="Founder select" help="Filter by founder status. --keep-founders excludes all samples with at least one known parental ID from the current analysis (note that it is not necessary for that parent to be in the current dataset), while --keep-nonfounders does the reverse. By default, nonfounders are not counted by --freq or --maf/--max-maf/--hwe. Use the --nonfounders flag to include them.">
                            <option value="--keep-founders">Keep females</option>
                            <option value="--remove-founders">Remove females</option>
                            <option value="--nonfounders">Remove males</option>
                        </param>
                    </when>
                </conditional>
            </when>
            <when value="data_manage">
                <conditional name="var_update">
                    <param name="var_select" type="select" label="Update Variant Info" help="Whole-exome and whole-genome sequencing results frequently contain variants which have not been assigned standard IDs. If you don't want to throw out all of that data, you'll usually want to assign them chromosome-and-position-based IDs.">
                        <option value="set-missing-var-ids">set missing var ids</option>
                        <option value="set-all-var-ids">set all var ids</option>
                    </param>
                    <when value="set-missing-var-ids">
                        <param name="template" type="text" label="Template string" help="Replaces missing IDs. The parameter taken by these flags is a special template string, with a '@' where the chromosome code should go, and a '#' where the base-pair position belongs."/>
                        <param name="multiallele" type="text" label="Multiallelic template string" help="Used to specify a special template to use for just multiallelic variants"/>
                        <param name="multiallele_nonsnp" type="text" label="Multiallelic, non-SNP template string" help="Same as above, but only for non-SNP multiallelic variants"/>
                    </when>
                    <when value="set-all-var-ids">
                        <param name="template" type="text" label="Template string" help="Replaces all IDs. The parameter taken by this flag is a special template string, with a '@' where the chromosome code should go, and a '#' where the base-pair position belongs."/>
                        <param name="multiallele" type="text" label="Multiallelic template string" help="Used to specify a special template to use for just multiallelic variants"/>
                        <param name="multiallele_nonsnp" type="text" label="Multiallelic, non-SNP template string" help="Same as above, but only for non-SNP multiallelic variants"/>
                    </when>
                </conditional>
                <conditional name="new_id">
                    <param name="set" type="select" label="Specify rules for long variants" help="Allele names associated with indels are occasionally very, very long, and the synthetic variant ID names which would be generated from such long alleles are very inconvenient to work with. As a result, if any allele codes are longer than 23 characters, PLINK 2 requires you to use --new-id-max-allele-len to explicitly specify how they should be handled.">
                        <option value="No"/>
                        <option value="Yes"/>
                    </param>
                    <when value="No"/>
                    <when value="Yes">
                        <param name="length" type="integer" label="Max allele length" value="23" help="Length threshold to rename alleles"/>
                        <param name="rule" type="select" label="Handle alleles above max length">
                            <option value="" selected="true">Do not specify</option>
                            <option value="error">Error</option>
                            <option value="missing">Assign the unnamed-variant ID to alleles with lables longer than threshold </option>
                            <option value="truncate">Truncate alleles with labels longer than threshold</option>
                        </param>
                    </when>
                </conditional>
                <conditional name="update_cols">
                    <param name="set" type="select" label="Update variant columns">
                        <option value="No">No</option>
                        <!-- <option value="update_chr">update-chr</option>
                        <option value="update_cm">update-cm</option> -->
                        <option value="update_map">update-map</option>
                        <option value="update_name">update-name</option>
                        <!-- <option value="update_allele">update-allele</option> -->
                    </param>
                    <when value="No"/>
                    <!-- <when value="update_chr">
                        <param name="input" type="data" format="tabular,tsv,txt", help="By default, the new value is read from column 2 and the (old) variant ID from column 1, but you can adjust these positions with the second and third parameters."/>
                        <param id="chr_col" type="integer" value=""/>
                    </when>
                    <when value="update_cm">
                        <param name="input" type="data" format="tabular,tsv,txt", help="By default, the new value is read from column 2 and the (old) variant ID from column 1, but you can adjust these positions with the second and third parameters."/>
                        <param id="chr_col" type="integer" value=""/>
                    </when> -->
                    <when value="update_map">
                        <param name="input" type="data" format="tabular,tsv,txt", help="By default, the new value is read from column 2 and the (old) variant ID from column 1, but you can adjust these positions with the second and third parameters."/>
                        <param name="col_num" type="integer" label="New ID column number" value="2"/>
                        <param name="old_col" type="integer" label="Old ID column" value="1"/>
                        <param name="skip" type="integer" label="Skip" optional="true" help="Either a nonnegative integer, in which case it indicates the number of lines to skip at the top of the file, or a single nonnumeric character, which causes each line with that leading character to be skipped."/>
                    </when>
                    <when value="update_name">
                        <param name="input" type="data" format="tabular,tsv,txt", help="By default, the new value is read from column 2 and the (old) variant ID from column 1, but you can adjust these positions with the second and third parameters."/>
                        <param name="col_num" type="integer" label="BP column number" value="2"/>
                        <param name="var_col" type="integer" label="Variant ID column" value="1"/>
                        <param name="skip" type="integer" label="Skip" optional="true" help="Either a nonnegative integer, in which case it indicates the number of lines to skip at the top of the file, or a single nonnumeric character, which causes each line with that leading character to be skipped."/>
                    </when>
                    <!-- <when value="update_allele">
                        <param name="input" type="data" format="tabular,tsv,txt", help="Columns of update file: 1) Variant ID.  2) One of the old allele codes. 3) The other old allele code. 4) New code for the first named allele. 5) New code for the second named allele"/>
                    </when>
                </conditional> -->
                <conditional name="ref_allele">
                    <param name="set" type="select" label="Set REF alleles" help="These can only be used in runs with --make-bed/--make-[b]pgen/--export and no other commands.">
                        <option value="yes">Yes</option>
                        <option value="no">No</option>
                    </param>
                    <when value="no"/>
                    </when value="yes">
                        <param name="file" type="data" format="vcf" label="Set all alleles specified in the file to REF"/>
                        <param name="column" type="integer" optional="true" label="Reference column number"/>
                        <param name="var_id" type="integer" optional="true" label="Variant id column in file"/>
                        <param name="force" label="Force" type="boolean" truevalue="force" falsevalue="" checked="false" help="By default, these error out when asked to change a 'known' reference allele. Add the 'force' modifier to permit that (when e.g. switching to a new reference genome)."/>
                    </when>
                </conditional>
                <conditional name="alt1_allele">
                    <param name="set" type="select" label="Set Alt alleles" help="These can only be used in runs with --make-bed/--make-[b]pgen/--export and no other commands.">
                        <option value="yes">Yes</option>
                        <option value="no">No</option>
                    </param>
                    <when value="no"/>
                    </when value="yes">
                        <param name="file" type="data" format="vcf" label="Set all alleles specified in the file to first ALT allele"/>
                        <param name="column" type="integer" optional="true" label="Alt column number"/>
                        <param name="var_id" type="integer" optional="true" label="Variant id column in file"/>
                        <param name="force" label="Force" type="boolean" truevalue="force" falsevalue="" checked="false" help="By default, these error out when asked to change a 'known' reference allele. Add the 'force' modifier to permit that (when e.g. switching to a new reference genome)."/>
                    </when>
                </conditional>
            </when>
            <when value="stats">
                <param name="freq" label="Return allele frequency file" type="boolean" truevalue="--freq" falsevalue="" label="Return allele frequency file"/>
                <param name="hardy" label="Return  Hardy-Weinberg statistics file" type="boolean" truevalue="--hardy" falsevalue="" label="Writes out writes autosomal Hardy-Weinberg equilibrium exact test statistics"/>
                <param name="missing" label="Missing Data" type="boolean" truevalue="--missing" falsevalue="" help="produces sample-based and variant-based missing data reports"/>
                <param name="het" label="Inbreeding" type="boolean" truevalue="--het" falsevalue="" label="Return allele frequency file" help="Compute observed and expected homozygous/heterozygous genotype counts for each sample, and reports method-of-moments F coefficient estimates"/>
            </when>
            <when value="link">
                <conditional name="set_indep">
                    <param name="choice" label="Variant pruning" type="select" help="Since two-variant r2 only makes sense for biallelic variants, these collapse multiallelic variants down to most common allele vs. the rest.">
                        <option value="Yes">Yes</option>
                        <option value="No">No</option>
                    </param>
                    <when value="No"/>
                    <when value="Yes">
                        <param name="window" type="integer" label="Window size" value="" help="Window size"/>
                        <param name="step" type="integer" label="Step size (variant ct)" value=""/>
                        <param name="r2" type="float" value="" label="Unphased Hardcall r^2 Threshold"/>
                    </when>
                </conditional>

            </when>
            <when value="pair_compare">
            </when>
            <when value="dist_sim">
            </when>
            <when value="stratification">
            </when>
            <when value="association">
                <conditional name="glm">
                    <param name="set_glm" type="select" label="Set GLM param">
                        <option value="No"/>
                        <option value="Yes"/>
                    </param>
                    <when value="No"/>
                    <when value="Yes">
                        <param name="hide_covar" type="boolean" truevalue="hide-covar" falsevalue="" label="Suppress covariate-only results"/>
                        <param name="sex" type="select" help="--glm ['sex' | 'no-x-sex'] Don't include sex from the .fam/.psam file and the --covar file at the same time; otherwise the duplicated column will cause the regression to fail.">
                            <option value=""/>
                            <option value="sex"/>
                            <option value="no-x-sex"/>
                        </param>
                        <param name="log10" type="boolean" truevalue="log10" falsevalue="" label="Report p-values in -log10(p) form"/>
                    </when>
                <conditional>
                <conditional name="adjust">
                    <param name="adjust" type="select" label="Adjust" help="For each association test in this run, report some basic multiple-testing corrections, sorted in increasing-p-value order.">
                        <option value="No"/>
                        <option value="Yes"/>
                    </param>
                    <when value="No"/>
                    <when value="Yes">
                        <param name="adj_vals" type="select" display="checkboxes" multiple="true" optional="true" Label="Adjustment types">
                            <option value="zs"/>
                            <option value="gc"/>
                            <option value="log10"/>
                        </param>
                    </when>
                </conditional>
                <param name="lambda" type="float" label="Lambda value" optional="true"/>
            </when>
            <when value="scoring">
            </when>
            <when value="rerun">
                <param type="data" name="logfile" format="binary" label="Plink Log File"/>
            </when>
            
        </conditional>
    </inputs>
    <outputs>
    </outputs>
    <help><![CDATA[
        TODO: Fill in help.
    ]]></help>
</tool>